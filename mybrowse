#!/usr/bin/env python3

#Copyright (C) 2021  tuxifreund <kaiser.barbarossa@yandex.com>
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <https://www.gnu.org/licenses/>.

import gi
gi.require_version('WebKit2', '4.0')
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')
from gi.repository import Gtk, WebKit2, Gdk
import configparser
import sys
from pathlib import Path

conf_dir = f"{Path.home()}/.config/mybrowse/"

p = Path(conf_dir)

if not p.is_dir():
        try:
                p.mkdir()
        except OSError as e:
                print(e)
                pass

conf_file = f"{p}/mybrowse.cfg"

if not Path(conf_file).exists():
        print('No configuration found')
        with open(conf_file, 'w') as f:
                f.write('''
[General]
home = https://lite.duckduckgo.com
search = https://duckduckgo.com/?q=

[Browser]
user-agent = Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0
firebug = True
webgl = True
''')
                f.close()

config = configparser.ConfigParser()
config.read(conf_file)
searchengine = config['General']['search']
startpage = config['General']['home']
if len(sys.argv) > 1:
        starturl = sys.argv[1]
else:
        starturl = startpage

class Browser(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title='MyBrowse')

        self.view = WebKit2.WebView()

        self.vbox = Gtk.Box(orientation=Gtk.STYLE_CLASS_VERTICAL)
        self.vbox.expand = True
        self.vbox.set_spacing(10)
        self.set_icon_name('browser')

        self.menu = Gtk.Box(orientation=Gtk.STYLE_CLASS_HORIZONTAL)
        self.menu.expand = False
        self.back = Gtk.Button()
        self.back_arrow = Gtk.Image.new_from_icon_name('go-previous', Gtk.IconSize.SMALL_TOOLBAR)
        self.back.add(self.back_arrow)
        self.menu.add(self.back)
        self.forward = Gtk.Button()
        self.forward_arrow = Gtk.Image.new_from_icon_name('go-next', Gtk.IconSize.SMALL_TOOLBAR)
        self.forward.add(self.forward_arrow)
        self.menu.add(self.forward)
        self.reload = Gtk.Button()
        self.reload_arrow = Gtk.Image.new_from_icon_name('view-refresh', Gtk.IconSize.SMALL_TOOLBAR)
        self.reload.add(self.reload_arrow)
        self.menu.add(self.reload)
        self.home = Gtk.Button()
        self.home_arrow = Gtk.Image.new_from_icon_name('go-home', Gtk.IconSize.SMALL_TOOLBAR)
        self.home.add(self.home_arrow)
        self.menu.add(self.home)
        self.bookmarker = Gtk.Button()
        self.bookmarker_symbol = Gtk.Image.new_from_icon_name('bookmark-new', Gtk.IconSize.SMALL_TOOLBAR)
        self.bookmarker.add(self.bookmarker_symbol)
        self.menu.add(self.bookmarker)
        self.searchbar = Gtk.SearchEntry()
        self.menu.add(self.searchbar)
        
        self.back.connect("clicked", self.go_back)
        self.forward.connect("clicked", self.go_forward)
        self.reload.connect("clicked", self.go_reload)
        self.home.connect("clicked", self.go_home)
        self.searchbar.connect("activate", self.search)
        self.bookmarker.connect("clicked", self.set_bookmark)
        self.vbox.add(self.menu)

        self.addressbar = Gtk.Entry()
        self.addressbar.set_text(starturl)
        self.vbox.add(self.addressbar)
        
        self.addressbar.connect("activate", self.change_url)


        self.sw = Gtk.ScrolledWindow()
        self.sw.add(self.view)

        self.vbox.pack_start(self.sw, True, True, 0)
        self.add(self.vbox)
        self.view.load_uri(starturl)
        self.view.connect("notify::uri", self.change_uri)
        self.view.connect("notify::title", self.change_title)
        self.view.connect("mouse-target-changed", self.link_hover)
        self.view.connect("notify::estimated-load-progress", self.progressbar)
        self.connect("key-press-event", self.keybinding)

        settings = self.view.get_settings()
        settings.set_property('user-agent', config['Browser']['user-agent'])
        settings.set_property('enable-developer-extras', config['Browser']['firebug'])
        settings.set_property('enable-webgl', config['Browser']['webgl'])

    def change_url(self, widget):
        url = self.addressbar.get_text()
        if not url.startswith(':'):
           if not ":" in url:
              if url.startswith('/'):
                url = "file://" + url
              else:
                url = "https://" + url
           elif url == "about:bookmarks":
              url = 'file://' + conf_dir + 'bookmarks.html'
           elif url == "about:history":
              url = 'file://' + conf_dir + 'history'
           self.view.load_uri(url)
        else:
           if url == ':report':
                self.view.load_uri('https://github.com/KaiserBarbarossa/MyBrowse/issues/new')
           elif url == ':home':
                self.view.load_uri(startpage)
           elif url == ':back':
                self.view.go_back()
           elif url == ':forward':
                self.view.go_forward()
           elif url == ':undo':
                self.view.go_back()
           elif url == ':u':
                self.view.go_back()
           elif url == ':redo':
                self.view.go_forward()
           elif url == ':r':
                self.view.go_forward()
           elif url == ':reload':
                self.view.reload()
           elif url == ':rl':
                self.view.reload()

    def change_title(self, widget, data, *arg):
        title = widget.get_title()
        if title == '':
                self.set_title('MyBrowse')
        else:
                self.set_title(title + ' - MyBrowse')

    def change_uri(self, widget, data, *arg):
        uri = widget.get_uri()
        self.addressbar.set_text(uri)
        history = open(conf_dir + 'history', 'a')
        history.write(uri + '\r\n')
        history.close()

    def go_back(self, widget):
        self.view.go_back()

    def go_forward(self, widget):
        self.view.go_forward()

    def go_reload(self, widget):
        self.view.reload()

    def go_home(self, widget):
        self.addressbar.set_text(startpage)
        self.view.load_uri(startpage)

    def search(self, searchbar):
        searchstring = self.searchbar.get_text()
        self.view.load_uri(searchengine + searchstring)

    def set_bookmark(self, widget):
        url = self.addressbar.get_text()
        title = self.view.get_title()
        bm_file =  open(conf_dir + 'bookmarks.html', 'a')
        bm_file.write('<a href="' + url + '">' + title + '</a><br>\r\n')
        bm_file.close()

    def link_hover(self, widget, hit_test, *args):
        if not hit_test.get_link_uri () == None:
                self.addressbar.set_text(hit_test.get_link_uri ())
        else:
                self.addressbar.set_text(widget.get_uri())

    def progressbar(self, widget, data, *arg):
        amount = widget.get_estimated_load_progress()
        self.addressbar.set_progress_fraction(amount)

    def keybinding(self, widget, event):
        if (event.keyval == Gdk.keyval_from_name('d') and
            event.state == Gdk.ModifierType.CONTROL_MASK):
                self.set_bookmark(self.view)
        if (event.keyval == Gdk.keyval_from_name('r') and
            event.state == Gdk.ModifierType.CONTROL_MASK):
                self.view.reload()
        if (event.keyval == Gdk.keyval_from_name('z') and
            event.state == Gdk.ModifierType.CONTROL_MASK):
                self.view.go_back()
        if (event.keyval == Gdk.keyval_from_name('y') and
            event.state == Gdk.ModifierType.CONTROL_MASK):
                self.view.go_forward()

if __name__ == "__main__":
    browser = Browser()
    browser.set_default_size(1024, 704)
    browser.maximize()
    browser.connect("delete-event", Gtk.main_quit)
    browser.show_all()
    Gtk.main()
